// Mocks generated by Mockito 5.3.2 from annotations
// in desafio_konsi/test/src/modules/cep/domain/usecases/get_cep_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:desafio_konsi/src/core/errors/error.dart' as _i5;
import 'package:desafio_konsi/src/modules/cep/domain/entities/cep_entity.dart'
    as _i6;
import 'package:desafio_konsi/src/modules/cep/domain/repositories/cep_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CepRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCepRepository extends _i1.Mock implements _i3.CepRepository {
  MockCepRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.CepEntity>> search(String? cep) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [cep],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.CepEntity>>.value(
            _FakeEither_0<_i5.Failure, _i6.CepEntity>(
          this,
          Invocation.method(
            #search,
            [cep],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.CepEntity>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> addHistory(
    String? cep,
    String? endereco,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addHistory,
          [
            cep,
            endereco,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #addHistory,
            [
              cep,
              endereco,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}

/// A class which mocks [CepEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockCepEntity extends _i1.Mock implements _i6.CepEntity {
  MockCepEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get cep => (super.noSuchMethod(
        Invocation.getter(#cep),
        returnValue: '',
      ) as String);
  @override
  String get logradouro => (super.noSuchMethod(
        Invocation.getter(#logradouro),
        returnValue: '',
      ) as String);
  @override
  String get complemento => (super.noSuchMethod(
        Invocation.getter(#complemento),
        returnValue: '',
      ) as String);
  @override
  String get bairro => (super.noSuchMethod(
        Invocation.getter(#bairro),
        returnValue: '',
      ) as String);
  @override
  String get localidade => (super.noSuchMethod(
        Invocation.getter(#localidade),
        returnValue: '',
      ) as String);
  @override
  String get uf => (super.noSuchMethod(
        Invocation.getter(#uf),
        returnValue: '',
      ) as String);
  @override
  String get ibge => (super.noSuchMethod(
        Invocation.getter(#ibge),
        returnValue: '',
      ) as String);
  @override
  String get gia => (super.noSuchMethod(
        Invocation.getter(#gia),
        returnValue: '',
      ) as String);
  @override
  String get ddd => (super.noSuchMethod(
        Invocation.getter(#ddd),
        returnValue: '',
      ) as String);
  @override
  String get siafi => (super.noSuchMethod(
        Invocation.getter(#siafi),
        returnValue: '',
      ) as String);
  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);
}
